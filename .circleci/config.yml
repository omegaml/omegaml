version: 2
jobs:
  test:
    working_directory: /home/circleci
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout:
          path: /home/circleci/omegaml-ce
      - run:
          # https://discuss.circleci.com/t/show-test-results-for-prospective-merge-of-a-github-pr/1662/14
          # adopted from https://gist.github.com/amacneil/f14db753919e0af2d7d2f5a8da7fce65
          # https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally
          name: Merge current master into PR branch
          command: |
            pr_number=${CI_PULL_REQUEST//*pull\//}
            if [ -n "$pr_number" ]
            then
              cd omegaml-ce
              echo "Building PR #$pr_number on target branch."
              (git checkout --force $CIRCLE_BRANCH && \
               git fetch --force origin pull/$pr_number/merge:circleci-build && \
               git checkout circleci-build) || \
                (echo "Merge failed. Please merge manually into your branch."; exit 1)
            else
              echo "Not a PR build."
            fi
      - run:
          name: Install Miniforge
          command: |
            curl -L -O --silent --show-error "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"
            bash Miniforge3-Linux-x86_64.sh -b
      - run:
          name: Run unit tests
          command: |
            source miniforge3/etc/profile.d/conda.sh
            cd omegaml-ce
            docker-compose -f docker-compose-dev.yml up -d
            echo "Waiting..."
            sleep 10
            # run tests
            docker exec -i $(docker ps -qf name=mongo) mongo < scripts/mongoinit.js
            function dotest() {
              export VER=$1
              export EXTRAS=all,dev,mlflow,tensorflow
              conda env remove -q -y -n omenv$VER || echo ""
              echo "Testing with python $VER"
              conda create -q -y -n omenv$VER python=$VER
              conda activate omenv$VER
              make -e install
              make -e test
              conda deactivate
            }
            if [[ $CIRCLE_BRANCH = "release-build" ]]; then
              # actual specs are in scripts/docker/test_images.txt
              scripts/runtests.sh --rmi --specs scripts/docker/test_images_minimal.ini
            else
              # if this is not a release build, do a quick build for speed
              PYVER=3.9
              dotest $PYVER
            fi
            docker-compose down --remove-orphans
          shell: /bin/bash -l -eo pipefail
      - run:
          name: Run live tests
          command: |
            source miniforge3/etc/profile.d/conda.sh
            PYVER=3.9
            conda create -q -y -n omenv$VER python=$VER
            conda activate omenv$VER
            pip install twine
            mkdir -p ~/.omegaml
            echo $BEHAVE_YML | base64 -d > ~/.omegaml/behave.yml
            ls -lart ~/.omegaml
            cd omegaml-ce
            LIVETEST_BEHAVE_EXTRA_OPTS="--tags ~tfestimator --tags ~tfkeras --tags ~snowflake" make livetest
            sudo chmod 777 -R /tmp/screenshots
          shell: /bin/bash -l -eo pipefail
      - store_artifacts:
          path: /tmp/screenshots
      - store_artifacts:
          path: /tmp/testlogs
  release:
    working_directory: /home/circleci
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout:
          path: /home/circleci/omegaml-ce
      - run:
          name: Install Miniforge
          command: |
            curl -L -O --silent --show-error "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"
            bash Miniforge3-Linux-x86_64.sh -b
      - run:
          name: Make image and pypi
          command: |
            source miniforge3/etc/profile.d/conda.sh
            mkdir -p ~/.omegaml
            echo $BEHAVE_YML | base64 -d > ~/.omegaml/behave.yml
            echo $PYPIRC_INI | base64 -d > ~/.pypirc
            ls -lart ~/.omegaml
            cd omegaml-ce
            VERSION=`cat omegaml/VERSION`
            docker login -u omegaml -p $DOCKER_PASS
            docker-compose -f docker-compose-dev.yml up -d
            echo "Waiting..."
            sleep 10
            docker exec -i $(docker ps -qf name=mongo) mongo < scripts/mongoinit.js
            # build python specific wheel to allow dependency matching, e.g. tensorflow 2.5 requires py3.9
            # TODO consider using https://cibuildwheel.readthedocs.io
            for PYVER in 3.7 3.8 3.9; do
              echo "Building distribution for $PYVER"
              # setup pyenv and build
              conda create -q -y -n omenv$PYVER python=$PYVER
              conda activate omenv$PYVER
              pip install -e .[dev]
              # set bdist_wheel options, see Makefile:dist
              export DISTTAGS="--python-tag py$(echo $PYVER | tr -d .)"
              export LIVETEST_BEHAVE_EXTRA_OPTS="--tags ~tfestimator --tags ~tfkeras --tags ~snowflake" make livetest
              if [[ "$VERSION" =~ "-rc" || "$VERSION" =~ "-dev" ]]; then
                make release-test
              else
                make release-prod
                make release-docker
              fi
            done
      - store_artifacts:
          path: /tmp/screenshots
workflows:
  version: 2
  workflow:
    jobs:
      - test:
          context: omegaml
      - release:
          context: omegaml
          requires:
            - test
          filters:
            branches:
              only: release-build
