version: 2
jobs:
  test:
    working_directory: /home/circleci
    machine:
      # https://circleci.com/docs/configuration-reference#available-linux-machine-images
      # -- Ubuntu 20.04 LTS, Docker 20.10.x
      # -- Python 3.10 requires at least Docker 20.10
      #    https://github.com/jupyter/docker-stacks/issues/1767
      #    https://medium.com/nttlabs/ubuntu-21-10-and-fedora-35-do-not-work-on-docker-20-10-9-1cd439d9921
      image: ubuntu-2204:2023.07.2
    steps:
      - checkout:
          path: /home/circleci/omegaml-ce
      - run:
          # https://discuss.circleci.com/t/show-test-results-for-prospective-merge-of-a-github-pr/1662/14
          # adopted from https://gist.github.com/amacneil/f14db753919e0af2d7d2f5a8da7fce65
          # https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally
          name: Merge current master into PR branch
          command: |
            pr_number=${CI_PULL_REQUEST//*pull\//}
            if [ -n "$pr_number" ]
            then
              cd omegaml-ce
              echo "Building PR #$pr_number on target branch."
              echo "Waiting for github to merge..."
              # check that there is a valid merge
              while [[ -z $(git ls-remote -q | grep refs/pull/$pr_number/merge) ]]; do
                echo "waiting for merge to be ready"
                sleep 5
              done
              # fetch the merged pr to determine target branch
              git checkout --force $CIRCLE_BRANCH
              git fetch --force origin pull/$pr_number/merge:circleci-build
              git checkout circleci-build
              # find base branch, then actually merge
              base_branch=$(git rev-parse HEAD HEAD^ | xargs git merge-base | xargs git name-rev | cut -d ' ' -f 2 | head -n1)
              echo "Merging PR #$pr_number on $base_branch"
              git reset --hard $base_branch
              git pull --ff-only origin pull/$pr_number/head
            else
              echo "Not a PR build."
            fi
      - run:
          name: setup env
          command: |
            curl -L -O --silent --show-error "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"
            bash Miniforge3-Linux-x86_64.sh -b
            apt update && apt install -y docker-compose
            pip3 install tox tox-run-before tox-conda
      - run:
          name: Run unit tests
          command: |
            source miniforge3/etc/profile.d/conda.sh
            cd omegaml-ce
            docker-compose -f docker-compose-dev.yml up -d
            echo "Waiting..."
            sleep 10
            # run tests
            docker exec -i $(docker ps -qf name=mongo) mongo < scripts/mongoinit.js
            function dotest() {
              export VER=$1
              export EXTRAS=all,dev,mlflow,tensorflow
              conda env remove -q -y -n omenv$VER || echo ""
              echo "Testing with python $VER"
              conda create -q -y -n omenv$VER python=$VER
              conda activate omenv$VER
              make -e install
              make -e test
              conda deactivate
            }
            dotest 3.11
            docker-compose down --remove-orphans
          shell: /bin/bash -l -eo pipefail
      - store_artifacts:
          path: /tmp/screenshots
      - store_artifacts:
          path: /tmp/testlogs
  release:
    working_directory: /home/circleci
    machine:
      image: ubuntu-2204:2023.07.2
    steps:
      - checkout:
          path: /home/circleci/omegaml-ce
      - run:
          name: Install Miniforge
          command: |
            curl -L -O --silent --show-error "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"
            bash Miniforge3-Linux-x86_64.sh -b
            apt update && apt install -y docker-compose
            pip3 install tox tox-run-before tox-conda
      - run:
          name: run tests in multiple images
          command: |
            source miniforge3/etc/profile.d/conda.sh
            mkdir -p ~/.omegaml
            echo $BEHAVE_YML | base64 -d > ~/.omegaml/behave.yml
            echo $PYPIRC_INI | base64 -d > ~/.pypirc
            ls -lart ~/.omegaml
            cd omegaml-ce
            VERSION=`cat omegaml/VERSION`
            docker login -u omegaml -p $DOCKER_PASS
            # run all tests inside runtime docker images 
            make runtime-tests
      - run:
          name: Make image and pypi
          command: |
            source miniforge3/etc/profile.d/conda.sh
            cd omegaml-ce
            VERSION=`cat omegaml/VERSION`
            docker login -u omegaml -p $DOCKER_PASS
            # ensure docker user can write to /tmp
            mkdir -p /tmp/screenshots
            mkdir -p /tmp/testlogs
            chmod -R 777 /tmp/screenshots
            chmod -R 777 /tmp/testlogs
            # build python specific wheel to allow dependency matching, e.g. tensorflow 2.5 requires py3.9
            # TODO consider using https://cibuildwheel.readthedocs.io or https://github.com/getsentry/milksnake or tox
            for PYVER in 3.10 3.11; do
              echo "Building distribution for $PYVER"
              # setup pyenv and build
              conda create -q -y -n omenv$PYVER python=$PYVER
              conda activate omenv$PYVER
              pip install -e .[dev]
              # set bdist_wheel options, see Makefile:dist
              export DISTTAGS="--python-tag py$(echo $PYVER | tr -d .)"
              # set livetest options, see Makefile:livetest
              export LIVETEST_BEHAVE_EXTRA_OPTS="--tags ~tfestimator --tags ~tfkeras --tags ~snowflake" 
              # build release artifacts and deploy to pypi and docker (if not rc or dev) 
              if [[ "$VERSION" =~ "-dev" ]]; then
                make livetest
              elif [[ "$VERSION" =~ "-rc" ]]; then
                make release-test
              else
                make release-prod
                make release-docker
              fi
            done
      - store_artifacts:
          path: /tmp/screenshots
workflows:
  version: 2
  workflow:
    jobs:
      - test:
          context: omegaml
      - release:
          context: omegaml
          requires:
            - test
          filters:
            branches:
              only: /.*release-build.*/
